# 3. Pulling and Pushing Docker Images
--------------------------------------

* Searching for images in Docker Hub
------------------------------------
	. HOW DO WE KNOW WHICH IMAGE TO USE?

		* docker search python (THIS WILL RETURN A LIST OF AVAILABLE PYTHON IMAGES, ALONG WITH WITH THEIR NAMES AND DESCRIPTIONS)


	. YOU CAN FILTER THE SEARCH TO SHOW ONLY OFFICIAL OPTIONS

		$ docker search --filter is-official=true python


	. YOU CAN ALSO FILTER BY MINIMUM NUMBER OF STARS

		$ docker search --filter stars=100 python


	. THE AUTOMATED COLUM TELLS US IF YOU CAN BUILD THE IMAGE AUTOMATICALLY USING PLATFORMS SUCH AS GITHUB

		$ docker search --filter is-automated=true python (DEPRECATED)


	. IF YOU ARE USING MORE THAN ONE FILTER, YOU NEED TO SPECIFY THE FILTER OPTION FOR EACH INDIVIDUAL ARGUMENT

		$ docker search --filter is-official=true --filter stars=10 --filter is-automated=false python


	. YOU CAN LIMIT THE NUMBER OF SEARCH RESULTS

		$ docker search --limit 4 python


	. THE --no-trunc OPTION WILL RETURN THE FULL OUTPUT OF THE SEARCH RESULTS WITHOUT TRUNCATING ANYTHING. 

	USEFUL FOR READING THE FULL IMAGE DESCRIPTIONS

		$ docker search --no-trunc python


	. FORMAT THE SEARCH RESULT USING A GO TEMPLATE --> FOR EXAMPLE TO FORMATE IN A TABLE FORMAT, USE \t BETWEEN EACH COLUMN NAME

		$ docker search --format "table {{.Name}}/t{{.IsAutomated}}/t{{.IsOfficial}}/t{{.Description}}/T{{.StarCount}}" python 


	. FINALLY YOU CAN COMBINE ALL THE OPTIONS IF YOU NEED IT FOR HAVING A ROBUST SEARCH

		$ docker search --format "table {{.Name}}\t{{.IsOfficial}}\t{{.Description}}\t{{.StarCount}}" --filter is-official=true --filter stars=10 --no-trunc python


	. THE LAST STEP IS TO PULL THE IMAGE THAT YOU NEE

		$ docker image pull python

	
	. YOU CAN DOWNLOAD A SPECIFIC IMAGE (BUT DON'T USE THE LATEST VERSION OF A IMAGE BECAUSE IT CAN LEAD TO ERRORS)

		$ docker image pull python:3.12-rc-bookworm


------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Working with custom images
----------------------------

	. VIEW YOUR LOCAL IMAGES

		$ docker image ls [OPTIONS] [REPOSITORY[:TAG]]


	. IF YOU WANT TO SHOW ALL IMAGES

		$ docker image ls --all


	. OTHER OPTIONS

		$ docker image ls --no-trunc (The output is not truncated)

		$ docker image ls --quiet (Will return image ids and supress all other columns)

		$ docker image ls --digest (Hash that includes information about the image)

		$ docker image ls --filter reference-python* 
			(Similar to the filter option but with different options, for example reference allow to isolate images having a certain name or tag)

		$ docker image ls --filter before=python 
			(To filter images created before another image)

		$ docker image ls --filter since-python
			(To filter images created after another image)

		$ docker image ls --filter dangling=true (To isolate images that are not used anymore such as intermediate images)

		$ docker image ls --filter label=python* (To filter based on the image label)

	
		YOU CAN ALSO ADD FORMAT BUT FOR OTHER OPTIONS FOR THE COLUMNS

			$ docker image ls --format "table {{.ID}}\t{{.Repository}}\t{{.Tag}}\t{{.Size}}\t{{CreatedSince}}\t{{.CreatedAt}}\t{{.Diges}}"


------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Tagging and labeling images
-----------------------------

$ docker image ls (USEFUL COMMAND TO SEE THE LIST OF IMAGES)

		FOR ADDING A TAG

$ docker build -t SOURCE_IMAGE[:TAG] .


		IF WE DON'T SPECIFY THE TAG, DOCKER WILL GIVE THE TAG "latest"

$ docker build -t big-star-collectibles .


		IT'S A GOOD PRACTICE TO BUILD THE FINAL STABLE IMAGE USING THE LATEST VERSION TAG AND THEN A SECOND IMAGE NAME WITHOUT THE TAG SPECIFIED.  ALSO THE --no-chache OPTION
		ENSURES THAT THE IMAGES ARE REBUILD

$ docker build --no-cache -t big-star-collectibles:v1 -t big-star-collectibles .


		ANOTHER WAY TO GIVE TAGS TO IMAGES, IS USING THE DOCKER TAG COMMAND

$ docker tag SOURCE_IMAGE[:TAG] TARGET_IMAGE[:TAG]


		FOR EXAMPLE FOR GIVING MULTIPLE TAGS

$ docker tag big-star-collectibles:v1 big-star-collectibles:v1-python


		WHEN YOU ARE CREATING A NEW VERSION OF AN IMAGE, YOU WANT TO USE THE DOCKER BUILD COMMAND TO REBUILD THE IMAGE WITH A NEW IMAGE ID.

		THIS IS GOOD FOR KEEPING EACH VERSION SEPARATE SO THAT YOU DON'T OVERWRITE ANYTHING.



		ANOTHER WAY TO KEEP YOUR IMAGES ORGANIZES IS USING THE LABEL INSTRUCTION IN YOUR DOCKERFILE.  WHEN YOU REBUILD YOUR IMAGE, THE LABEL WILL BE ADDED TO THE METADATA.


		YOU CAN'T SEARCH BY IMAGES BY TAG, BUT YOU CAN FILTER BY LABEL


$ docker image ls --filter label="com.example.vendor"="Big Star Collectibles"


------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Working with a private image repository
-----------------------------------------
	FOR PUSHING TO DOCKER HUB, TAG, AND USE THE NAME OF YOUR REMOTE REPOSITORY

$ docker tag big-star-collectibles shragabuchel1977/big-star-collectibles-repo:big-star-collectibles

$ docker push shragabuchel1977/big-star-collectibles-repo:big-star-collectibles


	TO PULL THE IMAGE FROM DOCKER HUB

$ docker pull shragabuchel1977/big-star-collectibles-repo:big-star-collectibles


------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Inspecting images
-------------------
$ docker image ls

$ docker image inspect <ID>

	REPOTAGS: ALL TAGS ASSOCIATED WITH THE IMAGE

	CREATED: UTC FORMAT

	CONFIG: ENVIRONMENT SETTINGS

	YOU CAN RETURN SPECIFIC SECTIONS AND FORMAT THEM USING JSON

$ docker image inspect --format='{{json .Config.Labels}}' big-star-collectibles


-------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Removing images
-----------------
$ docker image ls


	FOR REMOVING IMAGES

$ docker rmi -f big-star-collectibles


	TO REMOVE ALL TAGS ASSOCIATE WITH AN IMAGE PASS THE IMAGE ID

$ docker rmi -f 524db69b4c8e


	YOU CAN ALSO REMOVE IMAGES BY DIGEST

$ docker images --digest

$ docker rmi -f <image-name>@<digest>

$ docker rmi -f pytho@sha256:2e37 ...


	YOU CAN ALSO REMOVE IMAGES USING VS-CODE AND DOCKER HUB


------------------------------------------------------------------------------------------------------------------------------------------------------------------











 












		

		
		
	


	





 


	






























