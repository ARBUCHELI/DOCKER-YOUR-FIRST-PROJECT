# 4. Running Docker Containers
------------------------------

* Running a container
---------------------

	FOR STARTING ANY STOPPER CONTAINER

$ docker start big-star-collectibles

	THEN YOU RUN THE CONTAINER

$ docker run [OPTIONS] IMAGE[:TAG] [COMMAND] [ARG...]

	THERE ARE MULTIPLE OPTIONS THAT YOU CAN USE WITH THE DOCKER RUN COMMAND

$ docker run -it -d -p 5000:5000 -v ${PWD}:/app/code big-star-collectibles

. it : Specifies that the container should run in interactive mode

. d : Runs the container in detached mode (the container will run in the background and teh command prompt will return to the host system)

. p : maps a port in the host system, to a port inside of the container (this allows to access the application inside the container from the host system)

. v : mounts a volume inside the container -  syntax -> host directory:directory inside the container (allows to persist data across container restarts and share data between the host
system and the container)


	TO STOP THE CONTAINER

$ docker stop gallant_joliot (gracefully terminates a process, rather than killing it immediately)

$ docker kill gallant_joliot (sends the sig kill signal, which cannot be blocked or handled, You should be careful when using the kill command, as the killed child process doesn't notify
its parent that it received the kill signal, which can cause errors)

$ docker start big-star-collectibles


------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Listing containers
--------------------
$ docker ps


	TO DISPLAY ALL CONTAINERS, INCLUDING STOPPED CONTAINERS

$ docker ps -a


	TO SHOW A NUMBER OF THE LAST CREATED CONTAINERS, INCLUDING ALL STATES

$ docker ps -n 1


	TO DISPLAY ONLY THE CONTAINER IDS

$ docker ps -q


	TO DISPLAY THE TOTAL FILE SIZE OF ALL CONTAINERS

$ docker ps -s


	TO SHOW THE LAST CREATED CONTAINER


$ docker ps -l


	TO SHOW THE FULL OUTPUT

$ docker ps --no-trunc


	YOU CAN ALSO USE THE FILTER OPTION TO SEARCH FOR SPECIFIC CONTAINERS

$ docker ps --filter label="com.example.vendor"="Big Star Collectibles"


	IT'S ALSO VERY USEFUL TO SEARCH FOR CONTAINERS BASED ON THEIR EXIT CODE

$ docker ps -a --filter 'exited=137' --> (137 means that the container was killed)


	IS ALSO USEFUL TO FILTER BASED ON THE IMAGE OF A CONTAINER OR A DESCENDANT OF IT

$ docker ps --filter ancestor=big-star-collectibles:v2


	IT'S ALSO USEFUL TO FORMAT THE SEARCH RESULTS USING JSON

$ docker ps --filter label="com.example.vendor"="Big Star Collectibles" --format json


	YOU CAN ALSO FORMAT AS A TABLE, TO SHOW ONLY THE INFORMATION THAT YOU NEED

$ docker ps --filter label="com.example.vendor"="Big Star Collectibles" --format "table {{.ID}}\t{{.Names}}"


------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Inspecting Containers
-----------------------
THIS IS AN EFFECTIVE TROUBLESHOOTING TECHNIQUE FOR DEVELOPERS, AS IT ALLOWS THE DEVELOPERS TO VIEW THE INTERNAL STATE OF THE CONTAINERS

$ docker inspect [OPTIONS] NAME[ID [NAME[ID...]


$ docker ps

$ docker inspect pgadmin_container


	OUTPUT

[
    {
        "Id": "95ee349003eb1c3180a75471d8f91682f7b18933fad1c1ec09fc426d21d78d03",
        "Created": "2024-11-19T09:53:40.778012656Z",
        "Path": "/entrypoint.sh",
        "Args": [],
        "State": {
            "Status": "running",
            "Running": true,
            "Paused": false,
            "Restarting": false,
            "OOMKilled": false,
            "Dead": false,
            "Pid": 367,
            "ExitCode": 0,
            "Error": "",
            "StartedAt": "2024-11-24T11:56:40.104068473Z",
            "FinishedAt": "2024-11-21T15:43:57.15270554Z"
        },
        "Image": "sha256:a67d330eef3b5a831e25af0e72840f9bede50bb36bf3032855306de51c20d053",
        "ResolvConfPath": "/var/lib/docker/containers/95ee349003eb1c3180a75471d8f91682f7b18933fad1c1ec09fc426d21d78d03/resolv.conf",
        "HostnamePath": "/var/lib/docker/containers/95ee349003eb1c3180a75471d8f91682f7b18933fad1c1ec09fc426d21d78d03/hostname",
        "HostsPath": "/var/lib/docker/containers/95ee349003eb1c3180a75471d8f91682f7b18933fad1c1ec09fc426d21d78d03/hosts",
        "LogPath": "/var/lib/docker/containers/95ee349003eb1c3180a75471d8f91682f7b18933fad1c1ec09fc426d21d78d03/95ee349003eb1c3180a75471d8f91682f7b18933fad1c1ec09fc426d21d78d03-json.log",
        "Name": "/pgadmin_container",
        "RestartCount": 0,
        "Driver": "overlay2",
        "Platform": "linux",
        "MountLabel": "",
        "ProcessLabel": "",
        "AppArmorProfile": "",
        "ExecIDs": null,
        "HostConfig": {
            "Binds": null,
            "ContainerIDFile": "",
            "LogConfig": {
                "Type": "json-file",
                "Config": {}
            },
            "NetworkMode": "gpa-backend_default",
            "PortBindings": {
                "80/tcp": [
                    {
                        "HostIp": "",
                        "HostPort": "5050"
                    }
                ]
            },
            "RestartPolicy": {
                "Name": "always",
                "MaximumRetryCount": 0
            },
            "AutoRemove": false,
            "VolumeDriver": "",
            "VolumesFrom": null,
            "ConsoleSize": [
                0,
                0
            ],
            "CapAdd": null,
            "CapDrop": null,
            "CgroupnsMode": "host",
            "Dns": [],
            "DnsOptions": [],
            "DnsSearch": [],
            "ExtraHosts": [],
            "GroupAdd": null,
            "IpcMode": "private",
            "Cgroup": "",
            "Links": null,
            "OomScoreAdj": 0,
            "PidMode": "",
            "Privileged": false,
            "PublishAllPorts": false,
            "ReadonlyRootfs": false,
            "SecurityOpt": null,
            "UTSMode": "",
            "UsernsMode": "",
            "ShmSize": 67108864,
            "Runtime": "runc",
            "Isolation": "",
            "CpuShares": 0,
            "Memory": 0,
            "NanoCpus": 0,
            "CgroupParent": "",
            "BlkioWeight": 0,
            "BlkioWeightDevice": null,
            "BlkioDeviceReadBps": null,
            "BlkioDeviceWriteBps": null,
            "BlkioDeviceReadIOps": null,
            "BlkioDeviceWriteIOps": null,
            "CpuPeriod": 0,
            "CpuQuota": 0,
            "CpuRealtimePeriod": 0,
            "CpuRealtimeRuntime": 0,
            "CpusetCpus": "",
            "CpusetMems": "",
            "Devices": null,
            "DeviceCgroupRules": null,
            "DeviceRequests": null,
            "MemoryReservation": 0,
            "MemorySwap": 0,
            "MemorySwappiness": null,
            "OomKillDisable": false,
            "PidsLimit": null,
            "Ulimits": null,
            "CpuCount": 0,
            "CpuPercent": 0,
            "IOMaximumIOps": 0,
            "IOMaximumBandwidth": 0,
            "Mounts": [
                {
                    "Type": "volume",
                    "Source": "gpa-backend_pgadmin_data",
                    "Target": "/var/lib/pgadmin",
                    "VolumeOptions": {}
                }
            ],
            "MaskedPaths": [
                "/proc/asound",
                "/proc/acpi",
                "/proc/kcore",
                "/proc/keys",
                "/proc/latency_stats",
                "/proc/timer_list",
                "/proc/timer_stats",
                "/proc/sched_debug",
                "/proc/scsi",
                "/sys/firmware",
                "/sys/devices/virtual/powercap"
            ],
            "ReadonlyPaths": [
                "/proc/bus",
                "/proc/fs",
                "/proc/irq",
                "/proc/sys",
                "/proc/sysrq-trigger"
            ]
        },
        "GraphDriver": {
            "Data": {
                "LowerDir": "/var/lib/docker/overlay2/6087d3cedb19711fea4a3c1a80d2d7069a577404b068f1f30acb21362e4081b0-init/diff:/var/lib/docker/overlay2/9b9e7c459eea41bab66c9b5e00b11ab9e7d593746876f01a70a90ccd96cd7958/diff:/var/lib/docker/overlay2/4948deac41e47bc452ba667852bff559f11079e6d9338b9a039aef03c66cb7c2/diff:/var/lib/docker/overlay2/4f84e867a15f0684d9c483d1c69fa4136b12380643f764f5ed9c669175a33080/diff:/var/lib/docker/overlay2/a01ac2dee381e20178a18fb885b67f8877350dd25fd2ec193f5ebacef8cba71e/diff:/var/lib/docker/overlay2/0207b5516e42e9f07b013c277822776640ab7e54d76d03b0b65dd6b81a8db803/diff:/var/lib/docker/overlay2/3867609d712b7e4509f630f5b59f8a7884651ea428bb378075296cdb8ae5c88b/diff:/var/lib/docker/overlay2/5bd48d70479a16b2369a547fafc938cee62b6bdd3407aa25a46ab26b83657ec5/diff:/var/lib/docker/overlay2/4fb377d49c1e55cf593c1822a74711f3d437010b5fbc24963f5ae3a17e2484ff/diff:/var/lib/docker/overlay2/7315db4450f5799d5fdbcd18d3c9d9183516476fea460571955439eb3c1782a7/diff:/var/lib/docker/overlay2/a6b82f551fb4521144416b46ba856a3334f2c794c7a17a311ee80652156db414/diff:/var/lib/docker/overlay2/437c0144b4588e56da24238c0da9b32e63040fa06cf1609d3d60786576918d7e/diff:/var/lib/docker/overlay2/967bbc18ced29b46b241594fc705bacd9cc222f46098afaecdb11d74fe99787f/diff:/var/lib/docker/overlay2/0e70882ba5810ca3bb59ba25668108b14e231dd9fb8f5f0783d9869e76fbf96e/diff:/var/lib/docker/overlay2/390ec0e1735c1db2febe841d80e950fa053e8d09ff19c887e87d4e931b61098d/diff:/var/lib/docker/overlay2/d1e6bc80a768eb3b5e385bd267f899b011fff00811b0b893b3f151050e4ed637/diff:/var/lib/docker/overlay2/01ecb352c93bb41e7ddd81134e828411448cbe3c2739a383720663123dd099c7/diff",
                "MergedDir": "/var/lib/docker/overlay2/6087d3cedb19711fea4a3c1a80d2d7069a577404b068f1f30acb21362e4081b0/merged",
                "UpperDir": "/var/lib/docker/overlay2/6087d3cedb19711fea4a3c1a80d2d7069a577404b068f1f30acb21362e4081b0/diff",
                "WorkDir": "/var/lib/docker/overlay2/6087d3cedb19711fea4a3c1a80d2d7069a577404b068f1f30acb21362e4081b0/work"
            },
            "Name": "overlay2"
        },
        "Mounts": [
            {
                "Type": "volume",
                "Name": "gpa-backend_pgadmin_data",
                "Source": "/var/lib/docker/volumes/gpa-backend_pgadmin_data/_data",
                "Destination": "/var/lib/pgadmin",
                "Driver": "local",
                "Mode": "z",
                "RW": true,
                "Propagation": ""
            }
        ],
        "Config": {
            "Hostname": "95ee349003eb",
            "Domainname": "",
            "User": "pgadmin",
            "AttachStdin": false,
            "AttachStdout": true,
            "AttachStderr": true,
            "ExposedPorts": {
                "443/tcp": {},
                "80/tcp": {}
            },
            "Tty": false,
            "OpenStdin": false,
            "StdinOnce": false,
            "Env": [
                "PGADMIN_CONFIG_SERVER_MODE=False",
                "PGADMIN_DEFAULT_EMAIL=pgadmin4@pgadmin.org",
                "PGADMIN_DEFAULT_PASSWORD=admin",
                "PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
                "PYTHONPATH=/pgadmin4"
            ],
            "Cmd": null,
            "Image": "dpage/pgadmin4",
            "Volumes": {
                "/var/lib/pgadmin": {}
            },
            "WorkingDir": "/pgadmin4",
            "Entrypoint": [
                "/entrypoint.sh"
            ],
            "OnBuild": null,
            "Labels": {
                "com.docker.compose.config-hash": "fede92e54ad871597af5c3bf922a3988e5d865da3c38d6af8be314ba741f25c3",
                "com.docker.compose.container-number": "1",
                "com.docker.compose.depends_on": "",
                "com.docker.compose.image": "sha256:a67d330eef3b5a831e25af0e72840f9bede50bb36bf3032855306de51c20d053",
                "com.docker.compose.oneoff": "False",
                "com.docker.compose.project": "gpa-backend",
                "com.docker.compose.project.config_files": "C:\\Users\\Andres R. Bucheli\\Desktop\\SOFTWARE ENGINEER\\MY JOB 2024\\JOB RR TECHNOLOGY\\FIXING-BUG\\gpa-backend\\docker-compose.local.yaml",
                "com.docker.compose.project.environment_file": "C:\\Users\\Andres R. Bucheli\\Desktop\\SOFTWARE ENGINEER\\MY JOB 2024\\JOB RR 
TECHNOLOGY\\FIXING-BUG\\gpa-backend\\.env",
                "com.docker.compose.project.working_dir": "C:\\Users\\Andres R. Bucheli\\Desktop\\SOFTWARE ENGINEER\\MY JOB 2024\\JOB RR TECHNOLOGY\\FIXING-BUG\\gpa-backend",
                "com.docker.compose.service": "pgadmin",
                "com.docker.compose.version": "2.27.1"
            }
        },
        "NetworkSettings": {
            "Bridge": "",
            "SandboxID": "398d8275a25825caa582bef5b8442984d03e6308f183de015e187b084b59a455",
            "SandboxKey": "/var/run/docker/netns/398d8275a258",
            "Ports": {
                "443/tcp": null,
                "80/tcp": [
                    {
                        "HostIp": "0.0.0.0",
                        "HostPort": "5050"
                    }
                ]
            },
            "HairpinMode": false,
            "LinkLocalIPv6Address": "",
            "LinkLocalIPv6PrefixLen": 0,
            "SecondaryIPAddresses": null,
            "SecondaryIPv6Addresses": null,
            "EndpointID": "",
            "Gateway": "",
            "GlobalIPv6Address": "",
            "GlobalIPv6PrefixLen": 0,
            "IPAddress": "",
            "IPPrefixLen": 0,
            "IPv6Gateway": "",
            "MacAddress": "",
            "Networks": {
                "gpa-backend_default": {
                    "IPAMConfig": null,
                    "Links": null,
                    "Aliases": [
                        "pgadmin_container",
                        "pgadmin"
                    ],
                    "MacAddress": "02:42:ac:12:00:03",
                    "NetworkID": "ef00b41fef546ae325e3f6bfea3db7dc2d726616cc5cff95985f54cc302ade1e",
                    "EndpointID": "49576d2aab892ad41f44f3aceacc78af7b8e13afdbc2e7257bbca8e249d08d9c",
                    "Gateway": "172.18.0.1",
                    "IPAddress": "172.18.0.3",
                    "IPPrefixLen": 16,
                    "IPv6Gateway": "",
                    "GlobalIPv6Address": "",
                    "GlobalIPv6PrefixLen": 0,
                    "DriverOpts": null,
                    "DNSNames": [
                        "pgadmin_container",
                        "pgadmin",
                        "95ee349003eb"
                    ]
                }
            }
        }
    }
]


	FROM THE PREVIOUS INFORMATION:

. ID: Container ID

. State: Contains various Status Flags

. Image: Image that the container is running

. LogPath: System path to the container's log file

. Name: User defined name for the container

. RestarCount: Number of times the container has been restarted

. HostConfig: Includes configurations for how the container will interact with the host system (CRUCIAL FOR HELPING MANAGE CPU, AND MEMORY LIMITS, NETWORKING VALUES, OR DEVICE DRIVER
PATHS)

. Config: Shows the runtime configuration option set when the docker run command was executed


	IT IS ALSO POSSIBLE TO RUN THE docker inspect COMMAND TO RETURN SPECIFIC SECTIONS

$ docker inspect --format='{{.Config.Image}}' pgadmin_container --> FOR GETTING THE CONTAINER'S IMAGE

>> dpage/pgadmin4

$ docker inspect --format='{{.Id}}' pgadmin_container --> TO GET THE ID

	TO RETURN THE PATH TO THE LOG FILE FOR A CONTAINER

$ docker inspect --format='{{.LogPath}}' pgadmin_container 

	TO SEARCH FOR CONFIG SECTION

$ docker inspect --format='{{json .Config}}' pgadmin_container 

>> {"Hostname":"95ee349003eb","Domainname":"","User":"pgadmin","AttachStdin":false,"AttachStdout":true,"AttachStderr":true,"ExposedPorts":{"443/tcp":{},"80/tcp":{}},"Tty":false,"OpenStdin":false,"StdinOnce":false,"Env":["PGADMIN_CONFIG_SERVER_MODE=False","PGADMIN_DEFAULT_EMAIL=pgadmin4@pgadmin.org","PGADMIN_DEFAULT_PASSWORD=admin","PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin","PYTHONPATH=/pgadmin4"],"Cmd":null,"Image":"dpage/pgadmin4","Volumes":{"/var/lib/pgadmin":{}},"WorkingDir":"/pgadmin4","Entrypoint":["/entrypoint.sh"],"OnBuild":null,"Labels":{"com.docker.compose.config-hash":"fede92e54ad871597af5c3bf922a3988e5d865da3c38d6af8be314ba741f25c3","com.docker.compose.container-number":"1","com.docker.compose.depends_on":"","com.docker.compose.image":"sha256:a67d330eef3b5a831e25af0e72840f9bede50bb36bf3032855306de51c20d053","com.docker.compose.oneoff":"False","com.docker.compose.project":"gpa-backend","com.docker.compose.project.config_files":"C:\\Users\\Andres R. Bucheli\\Desktop\\SOFTWARE ENGINEER\\MY JOB 2024\\JOB RR TECHNOLOGY\\FIXING-BUG\\gpa-backend\\docker-compose.local.yaml","com.docker.compose.project.environment_file":"C:\\Users\\Andres R. Bucheli\\Desktop\\SOFTWARE ENGINEER\\MY JOB 2024\\JOB RR TECHNOLOGY\\FIXING-BUG\\gpa-backend\\.env","com.docker.compose.project.working_dir":"C:\\Users\\Andres R. Bucheli\\Desktop\\SOFTWARE ENGINEER\\MY JOB 2024\\JOB RR TECHNOLOGY\\FIXING-BUG\\gpa-backend","com.docker.compose.service":"pgadmin","com.docker.compose.version":"2.27.1"}}


------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Reviewing container log files
-------------------------------
FOR GETTING DETAILED INFORMATION ABOUT THE BEHAVIOR OF THE APPLICATION

$ docker logs [OPTIONS] CONTAINER


	FOR SETTING THE NUMBER OF LINES, USE THE TAIL OPTION

$ docker logs --tail 1000 -f pgadmin_container


	THE DETAILS OPTION SHOWS EXTRA DETAILS PROVIDED TO LOGS

$ docker logs --tail 1000 -f --details pgadmin_container


	TO SHOW LOGS SINCE THE SPECIFIED TIMESTAMP

$ docker logs --tail 1000 -f --since 2024-01-10T01:00:00Z pgadmin_container


postfix/postlog: starting the Postfix mail system
[2024-11-19 09:53:52 +0000] [1] [INFO] Starting gunicorn 22.0.0        
[2024-11-19 09:53:52 +0000] [1] [INFO] Listening at: http://[::]:80 (1)
[2024-11-19 09:53:52 +0000] [1] [INFO] Using worker: gthread
[2024-11-19 09:53:52 +0000] [89] [INFO] Booting worker with pid: 89    
[2024-11-19 15:34:30 +0000] [1] [INFO] Handling signal: term
[2024-11-19 15:34:30 +0000] [89] [INFO] Worker exiting (pid: 89)
postfix/postlog: starting the Postfix mail system
[2024-11-20 05:36:56 +0000] [1] [INFO] Starting gunicorn 22.0.0
[2024-11-20 05:36:56 +0000] [1] [INFO] Listening at: http://[::]:80 (1)
[2024-11-20 05:36:56 +0000] [1] [INFO] Using worker: gthread
[2024-11-20 05:36:57 +0000] [83] [INFO] Booting worker with pid: 83
postfix/postlog: starting the Postfix mail system
[2024-11-20 11:07:29 +0000] [1] [INFO] Starting gunicorn 22.0.0
[2024-11-20 11:07:29 +0000] [1] [INFO] Listening at: http://[::]:80 (1)
[2024-11-20 11:07:29 +0000] [1] [INFO] Using worker: gthread
[2024-11-20 11:07:29 +0000] [82] [INFO] Booting worker with pid: 82
[2024-11-21 15:43:53 +0000] [1] [INFO] Handling signal: term
[2024-11-21 15:43:54 +0000] [82] [INFO] Worker exiting (pid: 82)
[2024-11-21 15:43:57 +0000] [1] [INFO] Shutting down: Master
postfix/postlog: starting the Postfix mail system
[2024-11-24 11:56:49 +0000] [1] [INFO] Starting gunicorn 22.0.0
[2024-11-24 11:56:49 +0000] [1] [INFO] Listening at: http://[::]:80 (1)
[2024-11-24 11:56:49 +0000] [1] [INFO] Using worker: gthread
[2024-11-24 11:56:49 +0000] [82] [INFO] Booting worker with pid: 82
postfix/postlog: starting the Postfix mail system
[2024-11-29 09:33:47 +0000] [1] [INFO] Starting gunicorn 22.0.0
[2024-11-29 09:33:47 +0000] [1] [INFO] Listening at: http://[::]:80 (1)
[2024-11-29 09:33:47 +0000] [1] [INFO] Using worker: gthread
[2024-11-29 09:33:47 +0000] [82] [INFO] Booting worker with pid: 82


------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Working with volumes and mounts
---------------------------------
WHEN USING DOCKER YOU MIGHT COME ACROSS TWO CONCEPTS

	. Volume

	. Bind mount

BOTH ARE USED TO SHARE DATA BETWEEN THE HOST MACHINE AND THE CONTAINER


	CREATE A VOLUME

$ docker volume create big-star-collectibles-vol


	DOCKER VOLUMES ARE A TYPE OF DATA STORAGE PROVIDED BY DOCKER. A VOLUME IS A DIRECTORY IN THE HOST MACHINE THAT IS ACCESSIBLE TO A CONTAINER.

	WHEN YOU USE A DOCKER VOLUME, THE DATA INSIDE OF IT IS NOT STORED IN THE CONTAINER'S FILE SYSTEM, BUT IN THE HOST MACHINE'S FILE SYSTEM.

	THIS MEANS THAT DATA IN A VOLUME PERSISTS EVEN IF THE CONTAINER IS DELETED OR RECREATED.


	LIST DOCKER VOLUMES

$ docker volume ls


	TO INSPECT A VOLUME

$ docker volume inspect gpa-backend_pgadmin_data

>>

[
    {
        "CreatedAt": "2024-11-11T17:38:49Z",
        "Driver": "local",
        "Labels": {
            "com.docker.compose.project": "gpa-backend",
            "com.docker.compose.version": "2.27.1",
            "com.docker.compose.volume": "pgadmin_data"
        },
        "Mountpoint": "/var/lib/docker/volumes/gpa-backend_pgadmin_data/_data",
        "Name": "gpa-backend_pgadmin_data",
        "Options": null,
        "Scope": "local"
    }
]


	MOUNT POINT --> PATH INSIDE THE CONTAINER WHERE THE DATA FROM THE VOLUME IS LOCATED


	TO ATTACH A VOLUME TO A CONTAINER, USE THE V OPTION FOR VOLUME AND THEN SPECIFY THE HOST PATH, FOLLOWED BY THE CONTAINER PATH


	VOLUMES ARE A GOOD OPTION TO STORE DATA ACROSS CONTAINERS, FOR EXAMPLE TO STORE DATA FROM A DATABASE OUTSIDE THE CONTAINER, THIS WAY YOU CAN STOP OR DESTROY THE CONTAINER, WITHOUT
	USING ANYTHING.


	YOU CAN ALSO SPECIFY YOUR VOLUME IN YOUR DOCKER FILE:

# Use an official Python runtime as the base image
FROM python:3.12-rc-bookworm

#VOLUME /app/data

# Set the working directory in the container to /app
WORKDIR /app

# Copy the current directory contents into the container at /app
COPY . /app

# Install the required packages
RUN pip install --no-cache-dir -r requirements.txt

# Set the environment variable for Flask
ENV FLASK_APP=app.py

# Add labels to the image
# LABEL Formatting Option 1
LABEL "com.example.vendor"="Big Star Collectibles"
LABEL version="1.0"
LABEL description="The Big Star Collectibles Website \
using the Python base image."

# LABEL Formatting Option 2
# LABEL "com.example.vendor"="Big Star Collectibles" version="1.0" description="The Big Star Collectibles Website \
# using the Python base image."

# LABEL Formatting Option 3
# LABEL "com.example.vendor"="Big Star Collectibles" \
# version="1.0" \
# description="The Big Star Collectibles Website \
# using the Python base image."

# Run the command to start the Flask application
CMD ["flask", "run", "--host=0.0.0.0"]

	THE PROBLEM WITH THE OPTION OF CONFIGURING THE VOLUME IN THE DOCKER FILE IS THAT DOCKER WILL CREATE THE NAME FOR THE VOLUME


	TO REMOVE A VOLUME (THIS WILL ONLY WORK IF THE VOLUME IS NOT IN USE)

$ docker volume rm big-star-collectibles-vol


	YOU CAN ALSO USE THE -v FLAG TO SPECIFY A BIND MOUNT (THE DIFFERENCE WITH VOLUMES IS THAT THE DATA IS NOT STORED OUTSIDE THE CONTAINER). IF YOU REMOVE THE CONTAINER, THE DATA IN
	THE BIND MOUNT WILL BE LOST

	BIND MOUNTS ARE VERY USEFUL DURING DEVELOPMENT OR TESTING

$ docker run -it -d -p 5000:5000 -v "$(PWD)/test"/target:/app/test big-star-collectibles:v2

	THERE ARE TWO WAYS TO SPECIFY A MOUNT, USING THE -v or --mount flags

	EXPERTS SUGGEST TO USE THE -v FLAG, BECAUSE IF YOU SPECIFY A DIRECTORY THAT DOESN'T EXIST ON THE HOST, THE -v FLAG WILL CREATE IT, BUT THE MOUNT FLAG WILL RETURN AN ERROR

$ docker run -it -d -p 5000:5000 -mount type-bind, source="$(PWD)/test"/target:/app/test big-star-collectibles:v2

	TO VERIFY THAT THE BIND MOUNT IS WORKING

$ docker ps --> TO GET THE CONTAINER ID

$ docker exec -it c95893073eb4 sh (sh WILL OPEN A SHELL INSIDE THE CONTAINER)


------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Reviewing your daily workflow
-------------------------------
WHEN YOU ARE WORKING WITH DOCKER YOU WANT TO MAKE SURE THAT YOU KEEP YOUR RESOURCES CLEAN, BY REMOVING UNUSED OBJECTS SUCH AS IMAGES, CONTAINERS, AND VOLUMES AFTER YOU'RE FINISHED WITH YOUR
WORK EVERY DAY


	docker image prune WILL CLEAN UP ANY DANGLING IMAGES, MEANING IMAGES THAT ARE NOT TAGGED, AND ARE NOT REFERENCED BY ANY CONTAINER

$ docker image prune

>>
WARNING! This will remove all dangling images.
Are you sure you want to continue? [y/N] y    
Deleted Images:
deleted: sha256:42443066125c763e699c267c8bd5df9ec1d3056dc78f4c8664c0115bc86e8f26

Total reclaimed space: 0B


	TO REMOVE ALL IMAGES THAT ARE NOT USED BY EXISTING CONTAINERS

$ docker image prune -a -f

>> 
Deleted Images:
untagged: big-star-collectibles:latest
deleted: sha256:28827c0a9dc12b7e23535fc3c645dbef2db9745f9de5974fc08e8d478af53a23
untagged: shragabuchel1977/big-star-collectibles-repo:big-star-collectibles
untagged: shragabuchel1977/big-star-collectibles-repo@sha256:f32f1e8f3c5e31312ce35abd4961daa34367288d9ea5051120add29245e1e3d4
deleted: sha256:a64960e84cac0c6e61e8dede4f98a2c11c26805cb9eee77bf2b43d436267f3e7

Total reclaimed space: 0B


	YOU CAN ALSO USE FILTERS TO DELETE IMAGES

$ docker image prune -a -f --filter label="com.example.vendor"="Big Star Collectibles"


	YOU CAN ALSO DELETE CONTAINERS

$ docker container prune

>>
WARNING! This will remove all stopped containers.
Are you sure you want to continue? [y/N] y
Deleted Containers:
0d564d0ecb810b733a51afec7d4990958612cd456a9a5d2d9dd617ed650c089e
f9e8d55b3a6ba05acea8f5fee0d97c13743e6ab5f661413eede50a40372dad0c
c3f3d26acaed98c6702f21661fe1c3289b0c2b3a795af27e3b4cf2f5bbe8d200
0a85fa2afb6f7d158ef30a3674481706ea05605531d919dc5a9c386aa47218f7
9b3de3159667e2af07de26481c50a46fc7bfcc07edcafb28165f3c922867120c

Total reclaimed space: 415kB


	PRUNING VOLUMES WORK IN A SIMILAR WAY, BUT YOU CAN'T FILTER BY THE TIMESTAMP, ONLY BY LABEL

$ docker volume prune -f --filter label="comp.example.vendor"="Big Star Collectibles"


	FOR PRUNNING ALL UNUSED IMAGES, CONTAINERS, AND NETWORKS

$ docker system prune --volumes -f

>>
Deleted Images:
deleted: sha256:c4bf1eca6e5558b91d27e1794dff4a1b8dae0cc25fb5cd1d5941c04da4d15d55

Deleted build cache objects:
9e39cob1njw10ihmc1dabaf7k
jns935w4hoq0fvyb8334cecwj
jwp4o9lmhd61klrqpewdjqdck
4htysq16idbus0yq2g44mc2m8
v9p6gtugqr2o0ubibpirx002c
z2zyej2b98tfzyrhsfvcfjar0
hykcge4vko76edl9lggye7gti
ou21f4x061rt4ctwopvfhq7k0
rayrd5ra0uy8thsygix14saqv
dg0dz4nvsnef4lrjar7pxu9su
22pxubpnhfni0gibrgnh3jisc
imk8a2dtavixvhamp6a3qhjtj
ohh1e1b1s0havmzi6c92gdbx0
0c2cw363a3nv339nsaldsvtuo
wpmgy45dk0lapt8hj3ebhuif2
sx2h70ipcl9la1a1faft37hgk
ek3l32tc16yohz797azipqjmw
uro46j47md5dmv95prlpiwh63
zb6ml4ppjmg05rlnzit75aadd
joep4fwuv26qseqdu2xsppxuo
lcokdbxudmn69k4fzro15ju8k
va2y2xhh7rtyov3wjmu9tisnv
x21kysmq1bui94cpsy2v5ilkw
mfthz0h68mui3lnwiqcjaqx5t
n8l5beiov8eararsn44s3pxv8
vr7padt1lnxdcpfwf9a1p72od
te0swpnehkdi9ubp9etlnz8rt
zr6t0zs19sln97r931ovt8h1j
av42whoqkmrfphcd1vyf6phg9
910qwnz60f2gp7j9rmij4r2u0
umf01vsiua5avc8022x2f59e8
4g0hve0z3m1sbvuejbyxeqdgt
xno6p1hc58ucif8r85ansgf6p
l6kx3a6m0jpvxae30vvv3j47c
2yn4hphk9o8rybp7ur334vsn6
f1rdb66192tzliqs2js7zs56m
e0y5flqh9aw6djxyaphlpybiq
97irozy7mwg04rfwiklct7zfg
ci34izaox2iur4vtyvnvazvkn
ihn1e2j5wmilqaam96cs2jvzs
qku44p7ufjrymnkykt2726j7g
yyvqgh3hhu349p335zplj9gzo
hbrkfyygwldqnwg8mjckuk4gv
sn11s03j9bke01383k59agrzs
ozk8q4910olep8ymvw8bszeph
st642yjdz1yeesnqblpfkzeer
zdmekoelpipu6j0n0ojz8jl9f
gzpq0kpt93kmsuv0hlz2krr2s
h0t4yapkfuy9xh9zwdzfqf6ut
ebpp2x3ln7h2o78y2ummp9bdi

Total reclaimed space: 351MB


	IN THE PREVIOUS OPTION, VOLUMES ARE NOT INCLUDED BY DEFAULT, YOU NEED TO INCLUDE THE -v FLAG


------------------------------------------------------------------------------------------------------------------------------------------------------------------
















































































































	















































